install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
str(iris)
summary(iris)
iris
iris[which(iris$Species = 'virginica')]
iris[which(iris$Species == 'virginica')]
traceback()
subset
subset(iris)
?subset
subset(iris, Species == 'virginica')
mean()
mean(subset(iris, Species == 'virginica')["Sepal.length"])
mean(subset(iris, Species == 'virginica')$Sepal.length)
mean(subset(iris, Species == 'virginica')[,1])
subset(iris, Species == 'virginica')[,1]
apply(iris, 2, mean)
apply(iris, 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
debug(ls)
ls
ls
ls()
exit
?
''
''
q
,
tapply(mtcars$mpg, mtcars$cyl, mean)
Q
Q
tapply(mtcars$mpg, mtcars$cyl, mean)
summary(mtcars)
library(datasets)
data(mtcars)
factors
summary(mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
hps <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(hps[4])
abs(hps["4"])
abs(hps["4"] - hps["8"])
209.21429 - 82.63636
data(iris)
summary(iris)
swirl()
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo()
sapply(flags, unique)
?vapply
vapply(flags, unique, numeric(1))
flags[[1]]
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
getwd()
getwd()
rm(list = ls())
swirl()
library(swirl)
swirl()
quit
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic = fit$coefficients
ols.ic = fit$coef[1]
ols.ic <- fit$coef[1]
ols.slop <- fit$coef[2]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
residuals(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
swirl()
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
install.packages("manipulate")
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(parent ~ child, data = galton)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
(fit$residuals/(n-2))^.5
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(sTo)
sRes <- deviance(sTot)
h
sRes
sRes <- deviance(sTot)
sRes <- deviance(sTot)
sTot
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
?dTable
??dTable
shiny::runApp('Documents/DataScience/DevelopingDataProducts')
shiny::runApp('Documents/DataScience/DevelopingDataProducts')
setwd("~/Documents/DataScience/DevelopingDataProducts/Slidify")
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github(ramnathv/slidify')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
View(attenu)
library(slidify)
getwd()
author("first_deck")
```{r, results='hide'}
?dgamma
?lm
?colSums
?mean
?getMethod
